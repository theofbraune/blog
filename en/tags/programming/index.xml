<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Maths of Glory</title><link>https://theofbraune.github.io/blog/en/tags/programming/</link><description>Recent content in programming on Maths of Glory</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 28 Dec 2023 00:12:28 +0100</lastBuildDate><atom:link href="https://theofbraune.github.io/blog/en/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Vector Field Processing</title><link>https://theofbraune.github.io/blog/en/posts/vector_field_processing/</link><pubDate>Thu, 28 Dec 2023 00:12:28 +0100</pubDate><guid>https://theofbraune.github.io/blog/en/posts/vector_field_processing/</guid><description>In this TP we want to calculate vector fields on discrete surfaces.
1. Precalculate the mesh information To calculate vector fields for discrete surfaces, we will use a class, where we precalculate different quantities that will come in handy for the calculation. You will calculate these quantities directly in the constructor of the class Mesh. In this TP, we will define subsequently a class ElectricMesh that will inherit from this class.</description></item><item><title>Conformal Parametrization</title><link>https://theofbraune.github.io/blog/en/posts/conformal_parametrization/</link><pubDate>Tue, 25 Oct 2022 16:03:37 +0200</pubDate><guid>https://theofbraune.github.io/blog/en/posts/conformal_parametrization/</guid><description>In this TP we want to calculate the harmonic and the conformal parametrization of a mesh.
You will need to complete the class methods in the class ConformalParametrization that you will find in the file conformal.cpp. In order to see the goal of the TP, you can press 4 to use the pre-build Libigl method of the conformal parametrization on the mesh. A detailed description about the task and further information can be found in the original publication.</description></item><item><title>Heart Rate Measurement through Computer Vision</title><link>https://theofbraune.github.io/blog/en/posts/heart_rate_measurement/</link><pubDate>Wed, 30 Mar 2022 13:15:57 +0200</pubDate><guid>https://theofbraune.github.io/blog/en/posts/heart_rate_measurement/</guid><description>For many applications in telemedicine or in a security context a contactless heart rate measurement can be great interest useful. Most of the conventional approaches use a wearable object like a chest belt or a special watch. In the mentioned cases, this is not always applicable. Therefore one is interested in methods, that can extract the heart rate from a video feed.
This project was part of the Computer Vision introduction course at École Polytechnique and is mainly based on this article</description></item><item><title>Make it Stand - Balancing Shapes for 3D-printing</title><link>https://theofbraune.github.io/blog/en/posts/3d-printing/</link><pubDate>Tue, 22 Mar 2022 18:00:10 +0100</pubDate><guid>https://theofbraune.github.io/blog/en/posts/3d-printing/</guid><description>Through the evolution of 3D-printers, the it has become more and more easy to produce prototypes of 3 dimensional shapes. In this project we developed our first software to produce shapes and printable objects for a 3D-printer. This project was part as a final project of the École Polytechnique course &amp;ldquo;X-INF 573 Digital Representations and Analysis of Shapes&amp;rdquo;.
The aim of this project was to give an input shape, define an angle an orientation axis and then to carve out and deform the shape, such that the new modified shape can stand in this desired position.</description></item><item><title>Reflection on the locomotion technique</title><link>https://theofbraune.github.io/blog/en/posts/reflection_locomotion/</link><pubDate>Mon, 28 Feb 2022 11:18:11 +0100</pubDate><guid>https://theofbraune.github.io/blog/en/posts/reflection_locomotion/</guid><description>In this post I will summarize the work on the virtual reality project and reflect a bit what I experienced in the implementation process. First of all I should point out that unity is an extremely powerful platform and is easy to use, when having some programming experience. All these things like collision, drag and mass otherwise would be difficult to implement.
In the implementation process I was often improvising a bit to overcome difficulties.</description></item><item><title>Unity setup</title><link>https://theofbraune.github.io/blog/en/posts/unity_setup/</link><pubDate>Mon, 21 Feb 2022 18:04:26 +0100</pubDate><guid>https://theofbraune.github.io/blog/en/posts/unity_setup/</guid><description>In this post I will describe how I installed and set up the Unity Hub and editor on my machine.
First I went to the official unity page. This article assumes, that you have not installed unity yet. Thus you need to download the unity hub.
In this article I am using Windows, but the steps for the other operating systems are not that different. Of course you need to accept the unity licence agreement.</description></item><item><title>Roll a ball - Tutorial for a first game in Unity</title><link>https://theofbraune.github.io/blog/en/posts/roll_a_ball/</link><pubDate>Mon, 21 Feb 2022 18:03:18 +0100</pubDate><guid>https://theofbraune.github.io/blog/en/posts/roll_a_ball/</guid><description>The aim of this article is to guide you through the process of creating your first game in unity. In order to do this start by your Unity Hub, click on new project and select for this tutorial 3D-Core. Give the project your favorite name and location. Now you should see the unity editor. In order to get started, select Assets/Create/Scene. In the assets tab of the editor you should now see an icon new scene.</description></item><item><title>Implementation of Ski Locomotion in Virtual Reality.</title><link>https://theofbraune.github.io/blog/en/posts/implementation_locom/</link><pubDate>Mon, 31 Jan 2022 14:29:19 +0100</pubDate><guid>https://theofbraune.github.io/blog/en/posts/implementation_locom/</guid><description>In my locomotion project I went for an approach to imitate cross-country-skiing in VR. The overall idea will be, that you have to move your arms from top to down, and this then gives you a push. I used the environment build by Wen-Jie Tseng, that he provided for our class under this link. This was my starting point, to modify the position of the OVRCamera Rig with its controllers, in order to move.</description></item></channel></rss>